name: Deploy PBIP to Power BI

on:
  workflow_dispatch:  # Permite ejecución manual desde GitHub Actions

jobs:
  deploy:
    runs-on: windows-latest  # Usa un runner de Windows
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install Dependencies
        shell: pwsh
        run: |
          $path = "${{ github.workspace }}"
          $workingFolder = "$path\.ado"

          # Crear carpeta de módulos si no existe
          New-Item -ItemType Directory -Path "$workingFolder\modules" -ErrorAction SilentlyContinue | Out-Null

          # Descargar FabricPS-PBIP
          Write-Host "Downloading FabricPS-PBIP module"
          @(
              "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psm1",
              "https://raw.githubusercontent.com/microsoft/Analysis-Services/master/pbidevmode/fabricps-pbip/FabricPS-PBIP.psd1") |% {    
                  Invoke-WebRequest -Uri $_ -OutFile "$workingFolder\modules\$(Split-Path $_ -Leaf)"
              }

          # Verificar si AzureRM está instalado antes de intentar eliminarlo
          if (Get-Module -ListAvailable -Name AzureRM) {
              Write-Host "AzureRM detected. Attempting to remove..."
              
              # Si el módulo está cargado en la sesión, removerlo primero
              if (Get-Module -Name AzureRM) {
                  Remove-Module -Name AzureRM -Force -ErrorAction SilentlyContinue
              }

              # Intentar desinstalarlo completamente
              try {
                  Uninstall-Module -Name AzureRM -AllVersions -Force -ErrorAction Stop
                  Write-Host "AzureRM successfully removed."
              }
              catch {
                  Write-Host "AzureRM module was not found or could not be removed."
              }
          } else {
              Write-Host "AzureRM module is not installed, skipping removal."
          }

          # Instalar Az.Accounts si no está instalado
          if (-not (Get-Module -Name Az.Accounts -ListAvailable)) {
              Write-Host "Installing Az.Accounts module..."
              Install-Module -Name Az.Accounts -Scope CurrentUser -Force -AllowClobber
          }

      - name: Deploy PBIP to Power BI
        shell: pwsh
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          TENANT_ID: ${{ secrets.TENANT_ID }}
          WORKSPACE_ID: ${{ secrets.WORKSPACE_ID }}
          ADMIN_PRINCIPAL_ID: ${{ secrets.ADMIN_PRINCIPAL_ID }}
        run: |
          $path = "${{ github.workspace }}"
          $appId = "${{ env.APP_ID }}"
          $appSecret = "${{ env.APP_SECRET }}"
          $tenantId = "${{ env.TENANT_ID }}"                                        
          $workspaceId = "${{ env.WORKSPACE_ID }}"
          $adminPrincipalId = "${{ env.ADMIN_PRINCIPAL_ID }}"

          # Rutas de los archivos PBIP
          $pbipSemanticModelPath = "$path\Caso_Tutorial.SemanticModel"
          $pbipReportPath = "$path\Caso_Tutorial.Report"

          $workingFolder = "$path\.ado"
          Import-Module "$workingFolder\modules\FabricPS-PBIP" -Force

          Write-Host "Authenticating with Service Principal..."
          
          # Convertir credenciales en formato seguro
          $securePassword = ConvertTo-SecureString $appSecret -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($appId, $securePassword)

          # Conectar con Azure con Service Principal
          Connect-AzAccount -ServicePrincipal -Credential $credential -TenantId $tenantId

          $workspacePermissions = @{
              "principal" = @{
                  "id" = "$adminPrincipalId"
                  "type" = "user"
              }
              "role"= "Admin"
          }

          Write-Host "Ensuring Fabric Workspace & permissions"
          Set-FabricWorkspacePermissions $workspaceId $workspacePermissions

          Write-Host "Publishing Semantic Model"
          $semanticModelImport = Import-FabricItem -workspaceId $workspaceId -path $pbipSemanticModelPath

          Write-Host "Publishing Report"
          $reportImport = Import-FabricItem -workspaceId $workspaceId -path $pbipReportPath -itemProperties @{"semanticModelId"=$semanticModelImport.Id}
